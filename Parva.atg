  COMPILER Parva $CN
  /* Parva level 1 grammar  - Coco/R for C# (EBNF)
     P.D. Terry, Rhodes University, 2003
     Grammar only */
     // Group B - Matthew Pitcairn, William Carpenter-Frank, Ryan McDonaol

  CHARACTERS
    lf         = CHR(10) .
    backslash  = CHR(92) .
    control    = CHR(0) .. CHR(31) .
    letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                 + "abcdefghijklmnopqrstuvwxyz" .
    digit      = "0123456789" .
	nonzero = digit - "0" .
    stringCh   = ANY - '"' - control - backslash .
    charCh     = ANY - "'" - control - backslash .
    printable  = ANY - control .

  TOKENS
    identifier = letter { letter | digit | "_" } .
    number     = "0" {"0"} | nonzero { digit } .
    stringLit  = '"' { stringCh | backslash printable } '"' .
    charLit    = "'" ( charCh   | backslash printable ) "'" .

  COMMENTS FROM "//" TO lf
  COMMENTS FROM "/*" TO "*/"
  IGNORE CHR(9) .. CHR(13)

  PRODUCTIONS
    Parva             = "void" identifier "(" ")" Block .
    Block             = "{" { Statement } "}" .
    Statement         =   Block | ";"
                        | ConstDeclarations | VarDeclarations
                        | Assignment | IfStatement | WhileStatement | DoStatement
						| RepeatStatement | ForStatement | BreakStatement
						| ReturnStatement | HaltStatement | Increment
                        | ReadStatement | WriteStatement  | WriteLine | ReadLine .
    ConstDeclarations = "const" OneConst { "," OneConst } ";" .
    OneConst          = identifier "=" Constant .
    Constant          = number | charLit
                        | "true" | "false" | "null" .
    VarDeclarations   = Type OneVar { "," OneVar } ";" .
    OneVar            = identifier [ "=" Expression ] .
    Assignment        = Designator ("=" Expression | "++" | "--" ) ";" .
    Designator        = identifier [ "[" Expression "]" ] .
    IfStatement       = "if" "(" Condition ")" Statement [ ElseStatement ] .
	ElseStatement     = "else" Statement .
	ForStatement	  =  "for" "(" Condition ")" Statement .
    WhileStatement    = "while" "(" Condition ")" Statement .
	DoStatement		  = "do" Statement "while" "(" Condition ")" .
	BreakStatement    =  "break;" .
	RepeatStatement   = "repeat" Statement "until" "(" Condition ")" .
    ReturnStatement   = "return" ";" .
    HaltStatement     = "halt" ";" .
    ReadStatement     = ( "read" "(" ReadElement
                                   { "," ReadElement } ")" ";" ) .
	ReadLine		  = "readLine" "(" [ReadElement] { "," ReadElement } ")" ";" .
    ReadElement       = stringLit | Designator .
    WriteStatement    = ( "write" "(" WriteElement
                                    { "," WriteElement } ")" ";" ) .
	WriteLine		  = "writeLine" "(" { WriteElement } ")" ";" .
    WriteElement      = stringLit | Expression .
    Condition         = Expression .
	Increment		  = (("++" | "--") Designator) ";" .
    Expression        = AddExp [ RelOp AddExp ] | SetBody .
	SetBody			  = "{" [Expression] ( { (".." Expression) | "," Expression } ) "}" .
    AddExp            = [ "+" | "-" ] Term { AddOp Term } .
    Term              = Factor { MulOp Factor } .
    Factor            =   Designator | Constant
                        | "new" BasicType "[" Expression "]"
                        | "!" Factor | "(" Expression ")" .
    Type              = BasicType [ "[]" ] .
    BasicType         = "int" | "bool" | "char" | "set" .
    AddOp             = "+" | "-" | "||" .
    MulOp             = "*" | "/" | "%" | "&&" | "in" .
    RelOp             = "==" | "!=" | "<" | "<=" | ">" | ">=" .
  END Parva.
